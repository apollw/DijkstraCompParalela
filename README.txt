DijkstraCompParalela
Projeto de Implementação do Algoritmo de Dijkstra em Programação Sequencial e Programação Paralela em C para grafos com pelo menos 1000 vértices/nós.

O objetivo é demonstrar a eficiência da programação paralela frente à programação sequencial, utilizando o conceito de programação intensa, que requer muito poder de processamento para executar determinada tarefa.

O Algoritmo de Dijkstra é um algoritmo de busca em grafos utilizado para encontrar o caminho mais curto entre um nó de origem e todos os outros nós em um grafo ponderado. É um algoritmo de caminho mínimo que encontra o caminho mais curto entre um nó inicial e todos os outros nós em um grafo com pesos positivos nas arestas. Ele é um algoritmo guloso (greedy), ou seja, a cada passo ele escolhe a melhor opção localmente na esperança de que essa escolha leve à melhor solução globalmente. O algoritmo começa marcando a distância da origem para todos os outros vértices como infinito e a distância da origem para ela mesma como zero. Em seguida, é criado um conjunto S de nós visitados e um conjunto Q de nós não visitados. A cada passo, o algoritmo escolhe o nó em Q com a menor distância da origem e adiciona a S. Em seguida, para cada vizinho desse nó que ainda está em Q, o algoritmo calcula a distância até o nó visitado e atualiza a distância armazenada se essa distância for menor do que a distância atual armazenada. O processo é repetido até que todos os nós tenham sido visitados ou a menor distância para um nó ainda em Q seja infinita.

Ao final do algoritmo, a distância mínima da origem para cada nó é conhecida e o caminho mínimo pode ser reconstruído usando as informações armazenadas nas distâncias e nos nós predecessores. O algoritmo de Dijkstra é eficiente para grafos com muitos vértices e poucas arestas, e possui uma complexidade de tempo de O(E + VlogV), onde E é o número de arestas e V é o número de vértices.

Ele funciona mantendo um conjunto de nós para os quais o caminho mais curto já foi determinado e, em cada iteração, selecionando o nó com a menor distância do conjunto de nós não visitados. Em seguida, ele atualiza as distâncias dos nós adjacentes ao nó selecionado e repete o processo até que todos os nós tenham sido visitados ou a menor distância entre o nó inicial e o nó final tenha sido encontrada.

O algoritmo de Dijkstra pode ser usado em diversas aplicações que envolvem encontrar o caminho mais curto em um grafo com pesos positivos nas arestas. Algumas aplicações comuns incluem encontrar o caminho mais curto entre dois pontos em um mapa, encontrar a rota mais rápida em um sistema de transporte, encontrar o caminho mais barato em uma rede de telecomunicações, entre outras.

Existem várias implementações do algoritmo de Dijkstra que podem ser usadas para otimizar o desempenho do algoritmo em diferentes situações. Uma implementação comum é usar uma fila de prioridades para armazenar os nós não visitados, o que pode reduzir o tempo de execução do algoritmo. Outra implementação é usar uma estrutura de dados chamada heap de Fibonacci, que pode reduzir ainda mais o tempo de execução do algoritmo. Além disso, existem várias variações do algoritmo de Dijkstra que podem ser usadas para resolver problemas específicos, como o algoritmo A para encontrar o caminho mais curto em um espaço de busca com heurística.

Uma maneira de otimizar o desempenho do algoritmo de Dijkstra é usar uma fila de prioridades para armazenar os nós não visitados. A fila de prioridades é uma estrutura de dados que armazena elementos com uma chave associada e permite a remoção do elemento com a menor chave em tempo constante. No caso do algoritmo de Dijkstra, a chave de cada nó é a sua distância atual do nó inicial.
